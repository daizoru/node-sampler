// Generated by CoffeeScript 1.3.3
(function() {
  var BinaryTree, InMemory, Stream, YAML, contains, delay, error, events, inspect, log, moment, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Stream = require('stream').Stream;

  events = require('events');

  moment = require('moment');

  YAML = require('libyaml');

  _ref1 = require('../misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains;

  BinaryTree = require('../misc/btree');

  InMemory = require('./memory');

  module.exports = (function(_super) {

    __extends(exports, _super);

    function exports(url) {
      var buff, buffMax;
      this.url = url;
      this._writeEvent = __bind(this._writeEvent, this);

      exports.__super__.constructor.call(this);
      buff = [];
      buffMax = 3;
    }

    exports.prototype._load = function(url, cb) {
      var _this = this;
      if (cb == null) {
        cb = function() {};
      }
      return YAML.readFile(path, function(err, obj) {
        if (err != null) {
          return cb(err, {});
        } else {
          return cb(false, obj[0]);
        }
      });
    };

    exports.prototype._writeEvent = function(event, cb) {
      var snapshot,
        _this = this;
      this.events.push(event);
      this.buff.push(event);
      if (this.buff.length >= this.buffMax) {
        this.buff = [];
        snapshot = {
          first: this.first,
          last: this.last,
          records: this.records
        };
        YAML.writeFile(this.url, snapshot, function(err) {
          if (err) {
            log("store.YAML: _writeEvent: could not write events to disk..");
            cb(err);
            return _this.emit('error', err);
          } else {
            log("store.YAML: _writeEvent: events wrote to disk! sending drain..");
            return _this.emit('drain');
          }
        });
        return false;
      } else {
        return true;
      }
    };

    return exports;

  })(InMemory);

}).call(this);
