// Generated by CoffeeScript 1.3.3
(function() {
  var BinaryTree, Memory, Stream, YAML, contains, delay, error, events, fs, getFormat, inspect, log, moment, snappy, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Stream = require('stream').Stream;

  events = require('events');

  fs = require('fs');

  moment = require('moment');

  YAML = require('libyaml');

  snappy = require('snappy');

  _ref1 = require('../misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains;

  BinaryTree = require('../misc/btree');

  Memory = require('./memory');

  getFormat = function(path) {
    var _base;
    if (!path) {
      return "UNKNOW";
    }
    switch (typeof path.split === "function" ? typeof (_base = path.split(".").slice(-1)[0]).toLowerCase === "function" ? _base.toLowerCase() : void 0 : void 0) {
      case "js":
      case "json":
        return "JSON";
      case "yml":
      case "yaml":
        return "YAML";
      case "smp":
      case "sample":
        return "SAMPLER";
      default:
        return "UNKNOW";
    }
  };

  module.exports = (function(_super) {

    __extends(exports, _super);

    function exports(path) {
      var _this = this;
      this.path = path;
      this._writeEvent = __bind(this._writeEvent, this);

      exports.__super__.constructor.call(this);
      this.buff = [];
      this.buffMax = 3;
      this.isWriting = false;
      this.format = getFormat(this.path);
      switch (this.format) {
        case "YAML":
          log("using YAML");
          this.saveSnapshot = YAML.writeFile;
          break;
        case "JSON":
          log("using JSON");
          this.saveSnapshot = function(path, data, cb) {
            var dumpString;
            dumpString = JSON.stringify(data);
            return fs.writeFile(path, dumpString, function(err) {
              return cb(err);
            });
          };
          break;
        case "SAMPLER":
          this.saveSnapshot = function(path, data, cb) {
            var compressedBuffer, dumpString;
            dumpString = YAML.stringify(data);
            compressedBuffer = snappy.compressSync(dumpString);
            return fs.writeFile(path, compressedBuffer, function(err) {
              return cb(err);
            });
          };
          break;
        default:
          log("unknow format: " + this.format);
          throw "unknow format: " + this.format;
          return;
      }
    }

    exports.prototype._load = function(path, cb) {
      if (cb == null) {
        cb = function() {};
      }
    };

    exports.prototype._writeEvent = function(event) {
      var snapshot, _i, _len, _ref2,
        _this = this;
      this.events.push(event);
      this.buff.push(event);
      if (this.buff.length >= this.buffMax) {
        if (this.isWriting) {
          log("cannot flush right now, previous flushing is still in progress..");
          return false;
        }
        log("buffer max reached -> flushing to disk");
        this.isWriting = true;
        snapshot = {
          events: []
        };
        this.buff = [];
        _ref2 = this.events;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          event = _ref2[_i];
          snapshot.events.push([0 + event.timestamp, event.data]);
        }
        log("calling fsWrite with (" + this.path + ", " + snapshot + ")");
        this.saveSnapshot(this.path, snapshot, function(err) {
          _this.isWriting = false;
          if (err) {
            return _this.emit('error', err);
          } else {
            return _this.emit('flushed');
          }
        });
        return false;
      } else {
        return true;
      }
    };

    return exports;

  })(Memory);

}).call(this);
