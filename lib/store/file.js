// Generated by CoffeeScript 1.3.3
(function() {
  var BinaryTree, Memory, Stream, YAML, contains, delay, error, events, fs, getFormat, inspect, log, moment, snappy, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Stream = require('stream').Stream;

  events = require('events');

  fs = require('fs');

  moment = require('moment');

  YAML = require('libyaml');

  snappy = require('snappy');

  _ref1 = require('../misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains;

  BinaryTree = require('../misc/btree');

  Memory = require('./memory');

  getFormat = function(path) {
    var _base;
    if (!path) {
      return "UNKNOW";
    }
    switch (typeof path.split === "function" ? typeof (_base = path.split(".").slice(-1)[0]).toLowerCase === "function" ? _base.toLowerCase() : void 0 : void 0) {
      case "js":
      case "json":
        return "JSON";
      case "yml":
      case "yaml":
        return "YAML";
      case "smp":
      case "sample":
        return "SAMPLER";
      default:
        return "UNKNOW";
    }
  };

  module.exports = (function(_super) {

    __extends(exports, _super);

    function exports(path, options) {
      var k, v,
        _this = this;
      this.path = path;
      this._writeEvent = __bind(this._writeEvent, this);

      this.save = __bind(this.save, this);

      exports.__super__.constructor.call(this);
      this.config = {
        autosave: -1,
        filename: function() {}
      };
      for (k in options) {
        v = options[k];
        this.config[k] = v;
      }
      this.buff = [];
      this.buffMax = 1;
      this.isWriting = false;
      this.format = getFormat(this.path);
      switch (this.format) {
        case "YAML":
          log("using YAML");
          this.saveSnapshot = YAML.writeFile;
          break;
        case "JSON":
          log("using JSON");
          this.saveSnapshot = function(path, data, cb) {
            var dumpString;
            dumpString = JSON.stringify(data);
            return fs.writeFile(path, dumpString, function(err) {
              return cb(err);
            });
          };
          break;
        case "SAMPLER":
          this.saveSnapshot = function(path, data, cb) {
            return snappy.compress(data, function(err, compressed) {
              if (err) {
                cb(err);
                return;
              }
              return fs.writeFile(path, compressedBuffer, function(err) {
                return cb(err);
              });
            });
          };
          break;
        default:
          log("unknow format: " + this.format);
          throw "unknow format: " + this.format;
          return;
      }
    }

    exports.prototype._load = function(path, cb) {
      if (cb == null) {
        cb = function() {};
      }
    };

    exports.prototype.save = function() {
      var event, snapshot, _i, _len, _ref2,
        _this = this;
      if (this.isWriting) {
        log("CANNOT FLUSH RIGHT NOW");
        return false;
      }
      this.isWriting = true;
      snapshot = {
        events: []
      };
      this.buff = [];
      _ref2 = this.events;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        event = _ref2[_i];
        snapshot.events.push([0 + event.timestamp, event.data]);
      }
      log("FLUSHING STARTED: (" + this.path + ", " + snapshot + ")");
      this.saveSnapshot(this.path, snapshot, function(err) {
        log("FLUSHING ENDED: saveSnapshot returned: " + err);
        _this.isWriting = false;
        if (err) {
          log("store.File: _writeEvent: could not write events to disk..");
          return _this.emit('error', err);
        } else {
          log("store.File: _writeEvent: events wrote to disk! sending flushed=yes..");
          return _this.emit('flushed');
        }
      });
      return false;
    };

    exports.prototype._writeEvent = function(event) {
      this.events.push(event);
      this.buff.push(event);
      if (this.buff.length >= this.buffMax) {
        return this.save();
      } else {
        return true;
      }
    };

    return exports;

  })(Memory);

}).call(this);
