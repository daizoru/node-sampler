// Generated by CoffeeScript 1.3.3
(function() {
  var BinaryTree, Stream, contains, delay, error, events, inspect, log, moment, toolbox, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Stream = require('stream').Stream;

  events = require('events');

  moment = require('moment');

  toolbox = require('../misc/toolbox');

  _ref1 = require('../misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains;

  BinaryTree = require('../misc/btree');

  module.exports = (function(_super) {

    __extends(exports, _super);

    function exports() {
      this.length = __bind(this.length, this);

      this._writeEvent = __bind(this._writeEvent, this);

      this.write = __bind(this.write, this);
      this.events = [];
      this.first = false;
      this.last = false;
      this._length = 0;
    }

    exports.prototype.write = function(timestamp, data) {
      var event, first, last;
      event = {
        timestamp: timestamp,
        data: data
      };
      first = this.events[0];
      if (!first) {
        first = event;
      }
      first.previous = event;
      event.next = first;
      this.first = first;
      last = this.events[this.events.length - 1];
      if (!last) {
        last = event;
      }
      last.next = event;
      event.previous = last;
      this.last = last;
      if (this.first && this.last) {
        this._length = this.last.timestamp - this.first.timestamp;
      }
      return this._writeEvent(event);
    };

    exports.prototype._writeEvent = function(event) {
      var _this = this;
      log("store.Memory: _writeEvent: writing!");
      this.events.push(event);
      delay(0, function() {
        return _this.emit('flushed');
      });
      return true;
    };

    exports.prototype.previous = function(event, onComplete) {
      return delay(0, function() {
        return onComplete(event.previous);
      });
    };

    exports.prototype.next = function(event, onComplete) {
      return delay(0, function() {
        return onComplete(event.next);
      });
    };

    exports.prototype.length = function(cb) {
      var _this = this;
      if (cb == null) {
        cb = false;
      }
      if (cb) {
        log("got CB");
        delay(0, function() {
          return cb(_this._length);
        });
      } else {
        log("No CB: " + this._length);
        return this._length;
      }
    };

    return exports;

  })(events.EventEmitter);

}).call(this);
