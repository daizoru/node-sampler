// Generated by CoffeeScript 1.3.3
(function() {
  var BinaryTree, InMemory, PlaybackModule, RecordModule, contains, error, inspect, log, moment, _, _ref;

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  BinaryTree = require('btree');

  _ = require('underscore');

  moment = require('moment');

  contains = function(item, text) {
    return text.indexOf(item) !== -1;
  };

  InMemory = (function() {

    function InMemory() {
      this.events = [];
    }

    InMemory.prototype.push = function(event) {
      var first, last;
      first = _.first(this.events);
      first.previous = event;
      event.last = first;
      last = _.last(this.events);
      last.next = event;
      event.previous = last;
      return this.events.push(event);
    };

    return InMemory;

  })();

  PlaybackModule = (function() {

    function PlaybackModule(main) {
      var fire,
        _this = this;
      this.cursor = 0;
      this.running = false;
      this.rate = 1.0;
      fire = function(event) {
        BROKEN;

        var delta, next;
        next = main.database.nextr(event.timestamp);
        delta = event.timestamp - next.timestamp;
        return setTimeout(delta, function() {
          return this.fire(nextEvent);
        });
      };
      main.play = function(rate) {
        var first;
        if (rate == null) {
          rate = 1.0;
        }
        _this.rate = rate;
        first = main.database.first;
        if (first) {
          log("firing first event");
          return fire(first);
        } else {
          return log("no event to fire");
        }
      };
    }

    return PlaybackModule;

  })();

  RecordModule = (function() {

    function RecordModule(main) {
      main.record = function(data) {
        return main.database.push({
          timestamp: moment(),
          data: data
        });
      };
      main.recordAt = function(timestamp, data) {
        throw "Not Implemented";
      };
    }

    return RecordModule;

  })();

  module.exports = (function() {

    function exports(url) {
      if (url == null) {
        url = "";
      }
      this.database = new InMemory();
      if (contains("file://", url)) {
        this.database = new SimpleFile(url);
      } else {
        log("using default database (in-memory)");
      }
      new RecordModule(this);
      new PlaybackModule(this);
    }

    return exports;

  })();

}).call(this);
