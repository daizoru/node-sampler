// Generated by CoffeeScript 1.3.3
(function() {
  var Database, InMemory, PlaybackModule, RecordModule, SimpleFile, contains, error, inspect, log, moment, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  moment = require('moment');

  contains = function(item, text) {
    return text.indexOf(item) !== -1;
  };

  Database = (function() {

    function Database(recorder) {
      this.recorder = recorder != null ? recorder : false;
    }

    Database.prototype.insert = function(time, event) {};

    return Database;

  })();

  InMemory = (function(_super) {

    __extends(InMemory, _super);

    function InMemory(args) {
      this.args = args;
      InMemory.__super__.constructor.call(this);
    }

    InMemory.prototype.insert = function(time, event) {
      var rawString;
      return rawString = JSON.stringify({
        time: time,
        event: event
      });
    };

    return InMemory;

  })(Database);

  SimpleFile = (function(_super) {

    __extends(SimpleFile, _super);

    function SimpleFile(args) {
      this.args = args;
      SimpleFile.__super__.constructor.call(this);
    }

    SimpleFile.prototype.insert = function(time, event) {
      var rawString;
      return rawString = JSON.stringify({
        time: time,
        event: event
      });
    };

    return SimpleFile;

  })(Database);

  PlaybackModule = (function() {

    function PlaybackModule(main) {
      var _this = this;
      this.main = main;
      this.main.play = function(rate) {
        if (rate == null) {
          rate = 1.0;
        }
        return _this.main.database.insert(moment(), event);
      };
      this.main.recordAt = function(time, event) {
        return _this.main.database.insert(moment(time), event);
      };
    }

    return PlaybackModule;

  })();

  RecordModule = (function() {

    function RecordModule(main) {
      var _this = this;
      this.main = main;
      this.main.record = function(event) {
        return _this.main.database.insert(moment(), event);
      };
      this.main.recordAt = function(time, event) {
        return _this.main.database.insert(moment(time), event);
      };
    }

    return RecordModule;

  })();

  module.exports = (function() {

    function exports(url) {
      if (url == null) {
        url = "";
      }
      this.database = new InMemory();
      if (contains("file://", url)) {
        this.database = new SimpleFile(url);
      } else {
        log("using default database (in-memory)");
      }
      new RecordModule(this);
      new PlaybackModule(this);
    }

    return exports;

  })();

}).call(this);
