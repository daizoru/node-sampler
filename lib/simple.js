// Generated by CoffeeScript 1.3.3
(function() {
  var Cursor, Record, Stream, contains, delay, error, inspect, log, moment, simpleFactory, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Stream = require('stream').Stream;

  moment = require('moment');

  _ref1 = require('./misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains, simpleFactory = _ref1.simpleFactory;

  Record = require('./record');

  Cursor = require('./cursor');

  exports.Recorder = (function() {

    function Recorder(url) {
      var _this = this;
      if (url == null) {
        url = false;
      }
      this.writeAt = __bind(this.writeAt, this);

      this.write = __bind(this.write, this);

      this.callbacks = [];
      this.sync = 0;
      this.record = simpleFactory(Record, url);
      this.record.on('error', function(data) {
        var cb, _i, _len, _ref2;
        if (data.version > _this.sync) {
          _this.sync = data.version;
          _ref2 = _this.callbacks;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            cb = _ref2[_i];
            delay(0, function() {
              return cb(data.err);
            });
          }
          return _this.callbacks = [];
        } else {
          return 1;
        }
      });
      this.record.on('flushed', function(version) {
        var cb, _i, _len, _ref2;
        if (version > _this.sync) {
          _this.sync = version;
          _ref2 = _this.callbacks;
          for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
            cb = _ref2[_i];
            delay(0, function() {
              return cb();
            });
          }
          return _this.callbacks = [];
        } else {
          return 1;
        }
      });
    }

    Recorder.prototype.write = function(data, cb) {
      if (cb == null) {
        cb = false;
      }
      if (cb) {
        this.callbacks.push(cb);
      }
      return this.record.write(moment(), data);
    };

    Recorder.prototype.writeAt = function(timestamp, data, cb) {
      if (cb == null) {
        cb = false;
      }
      if (cb) {
        this.callbacks.push(cb);
      }
      return this.record.write(timestamp, data);
    };

    return Recorder;

  })();

  exports.Player = (function() {

    function Player(url, options) {
      this.pause = __bind(this.pause, this);

      this.resume = __bind(this.resume, this);

      this.start = __bind(this.start, this);

      var k, v,
        _this = this;
      this.config = {
        speed: 1.0,
        autoplay: true,
        withTimestamp: false,
        looped: false,
        onBegin: function() {},
        onData: function(tm, data) {},
        onEnd: function() {},
        onError: function(err) {}
      };
      for (k in options) {
        v = options[k];
        this.config[k] = v;
      }
      this.record = simpleFactory(Record, url);
      this.cursor = new Cursor({
        record: this.record,
        speed: this.config.speed,
        looped: this.config.looped
      });
      this.cursor.on('begin', function() {
        return delay(0, function() {
          return _this.config.onBegin();
        });
      });
      if (this.config.withTimestamp) {
        this.cursor.on('data', function(data) {
          return _this.config.onData(data.timestamp, data.data);
        });
      } else {
        this.cursor.on('data', function(data) {
          return _this.config.onData(data.data);
        });
      }
      this.cursor.on('end', function() {
        return _this.config.onEnd();
      });
      this.cursor.on('error', function(err) {
        return _this.config.onError(err);
      });
      if (this.config.autoplay) {
        this.resume();
      }
    }

    Player.prototype.start = function() {
      return this.resume();
    };

    Player.prototype.resume = function() {
      return this.cursor.resume();
    };

    Player.prototype.pause = function() {
      return this.cursor.pause();
    };

    return Player;

  })();

}).call(this);
