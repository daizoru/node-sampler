// Generated by CoffeeScript 1.3.3
(function() {
  var Player, Record, Recorder, Stream, contains, delay, error, inspect, log, moment, simpleFactory, _, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Stream = require('stream').Stream;

  _ = require('underscore');

  moment = require('moment');

  _ref1 = require('./misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains, simpleFactory = _ref1.simpleFactory;

  Record = require('./record').Record;

  Recorder = (function() {

    function Recorder(url) {
      if (url == null) {
        url = false;
      }
      this.rec = __bind(this.rec, this);

      log("simple.Recorder#constructor(" + url + ")");
      this.record = simpleFactory(Record, url);
    }

    Recorder.prototype.rec = function(data, status) {
      if (status == null) {
        status = function() {};
      }
      log("simple.Recorder#rec(" + data + "): simple rec");
      return this.record.write(moment(), data, status);
    };

    return Recorder;

  })();

  Player = (function() {
    var k, v,
      _this = this;

    function Player(url, options) {}

    log("simple.Player#constructor(" + url + ", options)");

    Player.config = {
      rate: 1.0,
      autoplay: true,
      timestamp: false,
      looped: false,
      onEach: function(event) {
        return log("" + event.timestamp + ": " + event.data);
      },
      onEnd: function() {},
      onErr: function(err) {}
    };

    for (k in options) {
      v = options[k];
      Player.config[k] = v;
    }

    Player.record = simpleFactory(Record, url);

    Player.cursor = new Cursor({
      record: Player.record,
      rate: Player.config.rate,
      looped: Player.config.looped,
      on: {
        data: function(timestamp, data) {
          return Player.config.onEach(timestamp, data);
        },
        end: function() {
          return Player.config.onEnd();
        },
        error: function(err) {
          Player.config.onEnd();
          return Player.config.onErr(err);
        }
      }
    });

    if (Player.config.autoplay) {
      Player.start();
    }

    return Player;

  }).call(this);

  ({
    start: function() {
      log("simple.Player#start()");
      return this.cursor.resume();
    }
  });

}).call(this);
