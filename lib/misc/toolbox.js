// Generated by CoffeeScript 1.3.3
(function() {
  var YAML, contains, delay, first, isString, last, loadFile, simpleFactory;

  YAML = require('libyaml');

  isString = exports.isString = function(obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
  };

  delay = exports.delay = function(t, f) {
    return setTimeout(f, t);
  };

  contains = exports.contains = function(item, text) {
    return text.indexOf(item) !== -1;
  };

  first = exports.first = function(array, n, guard) {
    if ((n != null) && !guard) {
      return Array.prototype.slice.call(array, 0, n);
    } else {
      return array[0];
    }
  };

  last = exports.last = function(array, n, guard) {
    if ((n != null) && !guard) {
      return Array.prototype.slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  simpleFactory = exports.simpleFactory = function(Obj, params) {
    if (params) {
      if (isString(params)) {
        return new Obj(params);
      } else {
        return params;
      }
    } else {
      return new Obj();
    }
  };

  loadFile = exports.loadFile = function(path, cb) {
    var _this = this;
    switch (path.split(".").slice(-1).toLowerCase()) {
      case "js":
      case "json":
        return fs.readFile(path, function(err, raw) {
          if (err != null) {
            return cb(err, {});
          } else {
            return cb(false, JSON.parse(raw));
          }
        });
      case "yml":
      case "yaml":
        return YAML.readFile(path, function(err, obj) {
          if (err != null) {
            return cb(err, {});
          } else {
            return cb(false, obj[0]);
          }
        });
      default:
        return fs.readFile(path, function(err, raw) {
          if (err != null) {
            return cb(err, {});
          } else {
            return cb(false, ("" + raw).split("\n"));
          }
        });
    }
  };

}).call(this);
