// Generated by CoffeeScript 1.3.3
(function() {
  var Cursor, Record, Stream, contains, delay, error, inspect, log, moment, simpleFactory, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Stream = require('stream').Stream;

  moment = require('moment');

  _ref1 = require('./misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains, simpleFactory = _ref1.simpleFactory;

  Record = require('./record');

  Cursor = require('./cursor');

  exports.Recorder = (function(_super) {

    __extends(Recorder, _super);

    function Recorder(url) {
      var _this = this;
      if (url == null) {
        url = "";
      }
      this.writeAt = __bind(this.writeAt, this);

      this.write = __bind(this.write, this);

      this.end = __bind(this.end, this);

      this.record = simpleFactory(Record, url);
      this.record.on('error', function(version, err) {
        log("StreamRecorder: got error: " + err);
        _this.emit('error', err);
      });
      this.record.on('flushed', function(version) {
        _this.emit('drain');
      });
      this.writable = true;
    }

    Recorder.prototype.end = function(data) {
      return this.emit('close');
    };

    Recorder.prototype.write = function(data) {
      this.record.write(moment(), data);
      return true;
    };

    Recorder.prototype.writeAt = function(timestamp, data) {
      this.record.write(timestamp, data);
      return true;
    };

    return Recorder;

  })(Stream);

  exports.Player = (function(_super) {

    __extends(Player, _super);

    function Player(url, options) {
      this.pause = __bind(this.pause, this);

      this.resume = __bind(this.resume, this);

      var k, v,
        _this = this;
      this.config = {
        speed: 1.0,
        autoplay: true,
        withTimestamp: false,
        looped: false
      };
      this.resumed = false;
      for (k in options) {
        v = options[k];
        this.config[k] = v;
      }
      this.record = simpleFactory(Record, url);
      this.cursor = new Cursor({
        record: this.record,
        speed: this.config.speed,
        looped: this.config.looped
      });
      this.cursor.on('begin', function() {});
      if (this.config.withTimestamp) {
        this.cursor.on('data', function(data) {
          return _this.emit('data', data);
        });
      } else {
        this.cursor.on('data', function(data) {
          return _this.emit('data', data.data);
        });
      }
      this.cursor.on('end', function() {
        return _this.emit('end');
      });
      this.cursor.on('error', function(err) {
        return _this.emit('error', err);
      });
      if (this.config.autoplay) {
        this.resume();
      }
    }

    Player.prototype.resume = function() {
      if (!this.resumed) {
        this.resumed = true;
        return this.cursor.resume();
      }
    };

    Player.prototype.pause = function() {
      if (this.resumed) {
        this.resumed = false;
        return this.cursor.pause();
      }
    };

    return Player;

  })(Stream);

}).call(this);
