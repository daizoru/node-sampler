// Generated by CoffeeScript 1.3.3
(function() {
  var Cursor, Player, Record, Recorder, Stream, contains, delay, error, inspect, log, moment, simpleFactory, _, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  Stream = require('stream').Stream;

  _ = require('underscore');

  moment = require('moment');

  _ref1 = require('./misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains, simpleFactory = _ref1.simpleFactory;

  Record = require('./record');

  Cursor = require('./cursor');

  Recorder = (function(_super) {

    __extends(Recorder, _super);

    function Recorder(url) {
      var _this = this;
      if (url == null) {
        url = "";
      }
      log("stream.Recorder#constructor(" + url + ")");
      this.record = simpleFactory(Record, url);
      this.record.on('close', function() {
        return _this.emit('close');
      });
    }

    Recorder.prototype.write = function(data) {
      return this.record.write(data);
    };

    return Recorder;

  })(Stream);

  Player = (function(_super) {

    __extends(Player, _super);

    function Player(url, options) {
      this.pause = __bind(this.pause, this);

      this.resume = __bind(this.resume, this);

      var k, v,
        _this = this;
      log("stream.Player#constructor(" + url + ")");
      this.config = {
        rate: 1.0,
        autoplay: true,
        timestamp: false,
        looped: false
      };
      for (k in options) {
        v = options[k];
        this.config[k] = v;
      }
      this.record = simpleFactory(Record, url);
      this.cursor = new Cursor({
        record: this.record,
        rate: this.config.rate,
        looped: this.config.looped,
        on: {
          data: function(timestamp, data) {
            return _this.emit('data', data);
          },
          end: function() {
            return _this.emit('end');
          },
          error: function(err) {
            _this.emit('end');
            return _this.emit('error', err);
          }
        }
      });
      if (this.config.autoplay) {
        this.resume();
      }
    }

    Player.prototype.resume = function() {
      log("stream.Player#start()");
      return this.cursor.resume();
    };

    Player.prototype.pause = function() {
      log("stream.Player#pause()");
      return this.cursor.pause();
    };

    return Player;

  })(Stream);

}).call(this);
