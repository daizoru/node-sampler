// Generated by CoffeeScript 1.3.3
(function() {
  var InRedis,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  InRedis = (function() {

    function InRedis() {
      this.connected = __bind(this.connected, this);

      var redis;
      this.prefix = "sampler::";
      this.config = {
        port: 6379,
        host: '127.0.0.1'
      };
      redis = require("redis");
      this.redis = redis.createClient(this.config.port, this.config.host);
      if (this.config.auth != null) {
        this.redis.auth(this.config.auth, function() {
          return this.connected();
        });
      } else {
        this.connected();
      }
    }

    InRedis.prototype.connected = function() {
      var _this = this;
      this.redis.on("error", function(err) {
        return error(err);
      });
      return {
        saveEventAt: function(at, event) {
          return this.redis.HMSET("" + this.prefix + at, {
            data: "" + (JSON.stringify(event.data)),
            timestamp: "" + event.timestamp,
            previous: "" + this.prefix + event.previous.timestamp,
            next: "" + this.prefix + event.next.timestamp
          });
        },
        saveRawAt: function(at, event) {
          return this.redis.HMSET("" + this.prefix + at, {
            data: "" + (JSON.stringify(event.data)),
            timestamp: "" + event.timestamp,
            previous: "" + this.prefix + event.previous,
            next: "" + this.prefix + event.next
          });
        },
        getLimits: function(onComplete) {
          return this.redis.HMGET("" + this.prefix + "limits", function(err, value) {
            if (err) {
              onComplete(false);
              return;
            }
            return onComplete({
              first: moment(value.first),
              last: moment(value.last)
            });
          });
        },
        setLimits: function(first, last, onComplete) {
          return this.redis.HMSET("" + this.prefix + "limits", {
            first: "" + first,
            last: "" + last
          });
        },
        loadEvent: function(at, onComplete) {
          return _this.redis.HGETALL("" + _this.prefix + at, function(err, res) {
            if (err) {
              onComplete(false);
              return;
            }
            return onComplete({
              previous: moment(res.previous),
              next: res.next,
              timestamp: moment(res.timestamp),
              data: JSON.parse(res.data)
            });
          });
        },
        next: function(event, onComplete) {},
        push: function(event) {}
      };
    };

    return InRedis;

  })();

}).call(this);
