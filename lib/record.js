// Generated by CoffeeScript 1.3.3
(function() {
  var contains, delay, error, events, inspect, log, moment, stores, _ref, _ref1,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  events = require('events');

  moment = require('moment');

  _ref1 = require('./misc/toolbox'), delay = _ref1.delay, contains = _ref1.contains;

  stores = require('./stores');

  module.exports = (function(_super) {

    __extends(exports, _super);

    function exports(url) {
      var path,
        _this = this;
      if (url == null) {
        url = "";
      }
      this.write = __bind(this.write, this);

      this.length = __bind(this.length, this);

      this.waiting = [];
      this.store = new stores.Memory();
      if (contains("file://", url)) {
        path = url.split("file://")[1];
        log("Record(" + url + ") -> PATH " + path);
        this.store = new stores.File(path);
      }
      this.store.on('error', function(err) {
        error("Record: @store sent us an error: " + err);
        return _this.emit('error', err);
      });
      this.store.on('flushed', function() {
        var cb, _i, _len, _ref2;
        error("Record: @store has flushed");
        _this.emit('flushed');
        _ref2 = _this.waiting;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          cb = _ref2[_i];
          delay(0, function() {
            return cb({});
          });
        }
        return _this.waiting = [];
      });
    }

    exports.prototype.length = function(cb) {
      if (cb == null) {
        cb = false;
      }
      return this.store.length(cb);
    };

    exports.prototype.write = function(timestamp, data, cb) {
      if (cb == null) {
        cb = false;
      }
      if (cb) {
        this.waiting.push(cb);
      }
      return this.store.write(timestamp, data);
    };

    return exports;

  })(events.EventEmitter);

}).call(this);
