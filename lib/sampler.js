// Generated by CoffeeScript 1.3.3
(function() {
  var BinaryTree, InMemory, PlaybackModule, RecordModule, contains, delay, error, events, inspect, log, moment, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  events = require('events');

  BinaryTree = require('./btree');

  _ = require('underscore');

  moment = require('moment');

  delay = function(t, f) {
    return setTimeout(f, t);
  };

  contains = function(item, text) {
    return text.indexOf(item) !== -1;
  };

  InMemory = (function() {

    function InMemory() {
      this.push = __bind(this.push, this);
      this.events = [];
      this.first = false;
      this.last = false;
    }

    InMemory.prototype.push = function(event) {
      var first, last;
      first = _.first(this.events);
      if (!first) {
        first = event;
      }
      first.previous = event;
      event.next = first;
      this.first = first;
      last = _.last(this.events);
      if (!last) {
        last = event;
      }
      last.next = event;
      event.previous = last;
      this.last = last;
      return this.events.push(event);
    };

    InMemory.prototype.previous = function(event, onComplete) {
      return delay(0, function() {
        return onComplete(event.previous);
      });
    };

    InMemory.prototype.next = function(event, onComplete) {
      return delay(0, function() {
        return onComplete(event.next);
      });
    };

    return InMemory;

  })();

  PlaybackModule = (function() {

    function PlaybackModule(main) {
      var fire, late,
        _this = this;
      this.rate = 1.0;
      this.looped = false;
      late = 0;
      main.output = function(cb) {
        return main.on('event', cb);
      };
      fire = function(event, onComplete) {
        var fired;
        if (onComplete == null) {
          onComplete = false;
        }
        fired = moment();
        main.emit('event', {
          timestamp: event.timestamp,
          data: event.data
        });
        return main.database.next(event, function(next) {
          var dbLatency, realDelay, theoricDelay;
          if (next === main.database.first) {
            main.emit('end', {
              looping: _this.looped
            });
            if (onComplete) {
              onComplete({
                looping: _this.looped
              });
            }
            if (!_this.looped) {
              return;
            }
          }
          theoricDelay = (next.timestamp - event.timestamp) / _this.rate;
          dbLatency = moment() - fired - Math.abs(late);
          realDelay = theoricDelay - dbLatency;
          if (realDelay < 0) {
            late = realDelay;
            realDelay = 0;
          }
          return delay(realDelay, function() {
            return fire(next, onComplete);
          });
        });
      };
      main.play = function(rate, cb) {
        var first, onComplete;
        if (rate == null) {
          rate = false;
        }
        if (cb == null) {
          cb = false;
        }
        onComplete = false;
        if (rate) {
          if (cb) {
            _this.rate = rate;
            onComplete = cb;
          } else {
            if (_.isNumber(rate)) {
              _this.rate = rate;
            } else {
              onComplete = rate;
            }
          }
        }
        first = main.database.first;
        if (first) {
          return fire(first, onComplete);
        } else {
          return 1;
        }
      };
    }

    return PlaybackModule;

  })();

  RecordModule = (function() {

    function RecordModule(main) {
      var _this = this;
      this.inputs = [];
      main.rec = function(data) {
        var timestamp;
        timestamp = moment();
        main.database.push({
          timestamp: timestamp,
          data: data
        });
        return timestamp;
      };
      main.listen = function(stream, params) {
        var filter, input, msg;
        if (!stream) {
          throw "error, no source specified";
          return;
        }
        msg = params.msg != null ? params.msg : 'data';
        filter = params.filter != null ? params.filter : function(d) {
          return d;
        };
        input = stream.on(msg, function(data) {
          return main.rec(filter(data));
        });
        _this.inputs.push(input);
        return log("listening to " + msg);
      };
      main.overwrite = function(timestamp, data) {
        throw "Not Implemented";
      };
    }

    return RecordModule;

  })();

  module.exports = (function(_super) {

    __extends(exports, _super);

    function exports(url) {
      if (url == null) {
        url = "";
      }
      this.database = new InMemory();
      if (contains("file://", url)) {
        this.database = new SimpleFile(url);
      } else {
        1;

      }
      new RecordModule(this);
      new PlaybackModule(this);
    }

    return exports;

  })(events.EventEmitter);

}).call(this);
