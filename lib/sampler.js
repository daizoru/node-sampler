// Generated by CoffeeScript 1.3.3
(function() {
  var BinaryTree, InMemory, PlaybackModule, RecordModule, contains, delay, error, events, inspect, log, moment, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require('util'), log = _ref.log, error = _ref.error, inspect = _ref.inspect;

  events = require('events');

  BinaryTree = require('./btree');

  _ = require('underscore');

  moment = require('moment');

  delay = function(t, f) {
    return setTimeout(f, t);
  };

  contains = function(item, text) {
    return text.indexOf(item) !== -1;
  };

  InMemory = (function() {

    function InMemory() {
      this.push = __bind(this.push, this);
      this.events = [];
      this.first = false;
      this.last = false;
    }

    InMemory.prototype.push = function(event) {
      var first, last;
      first = _.first(this.events);
      if (!first) {
        first = event;
      }
      first.previous = event;
      event.next = first;
      this.first = first;
      last = _.last(this.events);
      if (!last) {
        last = event;
      }
      last.next = event;
      event.previous = last;
      this.last = last;
      return this.events.push(event);
    };

    return InMemory;

  })();

  PlaybackModule = (function() {

    function PlaybackModule(main) {
      var fire,
        _this = this;
      this.cursor = 0;
      this.running = false;
      this.rate = 1.0;
      this.looped = false;
      fire = function(event) {
        var delta, next, now;
        main.emit('event', {
          timestamp: event.timestamp,
          data: event.data
        });
        next = event.next;
        if (next === main.database.first) {
          if (!_this.looped) {
            return;
          }
        }
        delta = (next.timestamp - event.timestamp) / _this.rate;
        now = moment();
        next.expected = now + delta;
        return delay(delta, function() {
          return fire(next);
        });
      };
      main.play = function(rate) {
        var first;
        if (rate == null) {
          rate = false;
        }
        if (rate) {
          _this.rate = rate;
        }
        first = main.database.first;
        if (first) {
          return fire(first);
        } else {
          return 1;
        }
      };
    }

    return PlaybackModule;

  })();

  RecordModule = (function() {

    function RecordModule(main) {
      main.rec = function(data) {
        var timestamp;
        timestamp = moment();
        main.database.push({
          timestamp: timestamp,
          data: data
        });
        return timestamp;
      };
      main.overwrite = function(timestamp, data) {
        throw "Not Implemented";
      };
    }

    return RecordModule;

  })();

  module.exports = (function(_super) {

    __extends(exports, _super);

    function exports(url) {
      if (url == null) {
        url = "";
      }
      this.database = new InMemory();
      if (contains("file://", url)) {
        this.database = new SimpleFile(url);
      } else {
        1;

      }
      new RecordModule(this);
      new PlaybackModule(this);
    }

    return exports;

  })(events.EventEmitter);

}).call(this);
