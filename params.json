{"body":"# node-sampler\r\n\r\n A library which record things and play them back\r\n\r\n## Overview\r\n\r\n You can record events from virtually any source (streams, event emitters, files, lines, code, message queues.. maybe even audio!)\r\n store them in a file (or just keep it in the memory for some time (support for DB stores is planned) \r\n and finally, playback these events slower (or faster).\r\n\r\n This can be very useful if you deal with machine learning algorithms that need to be trained\r\n on long time-series (eg. Twitter streams). You can also use it to simulate stuff like HTTP request etc..\r\n\r\n### Current status\r\n\r\n  This library is still in development so expect heavy refactoring and sparse documentation until I have more time to settle everything.\r\n  \r\n  However it is somehow functional, for basic use or/and fun. check the twitter example :)\r\n\r\n### Features\r\n\r\n  * store events in a text file (json, yaml)\r\n  * can load events and play them back!\r\n  * control over playback speed (slower or faster)\r\n  * accurate scheduler (latency is automatically corrected)\r\n  * a Simple API \r\n  * a Stream API\r\n  * basic Twitter example\r\n  * unit tests!\r\n\r\n### TODO / Wishlist\r\n  \r\n  * support for Redis, MongoDB, xSQL.. databases\r\n  * support for insertion of events (not just appending)\r\n  * support for reverse playback (for fun)\r\n  * more tests\r\n  * more examples\r\n\r\n### License\r\n\r\n  BSD\r\n\r\n## Installation\r\n\r\n### For users\r\n\r\n#### Install it as a dependency for your project\r\n\r\n    $ npm install sampler\r\n\r\n#### Install it globally in your system\r\n\r\n    $ npm install sampler -g\r\n\r\n### For developers\r\n\r\n  To install node-sampler in a development setup:\r\n\r\n    $ git clone http://github.com/daizoru/node-sampler.git\r\n\r\n  Run the tests (you need mocha. it seems I cannot put it in dev dependencies, or it does a cyclic loop):\r\n\r\n    $ npm run-script test \r\n\r\n  To build the coffee-script:\r\n\r\n    $ npm run-script build\r\n\r\n\r\n## Documentation\r\n\r\n  Sampler has two differents APIs: one for classic, quick & dirty code (Simple API),\r\n  the second for cleaner, async streamlined code (Stream API)\r\n\r\n### Simple API\r\n\r\nRecord formats\r\n\r\n``` coffeescript\r\n\r\n{Record} = require 'sampler'\r\n\r\n# data will be stored in memory\r\n#record = new Record()\r\n\r\n# stored as YAML file \r\n# (not very good: issues with encoding of international tweets, for instance)\r\nrecord = new Record \"file://examples/test.yml\"\r\n\r\n\r\n# stored as JSON file \r\n# not bad, it's compact (1 line) however it might not be very good for large files\r\nrecord = new Record \"file://examples/test.json\"\r\n\r\n# stored as SAMPLE file \r\n# compressed json, using Snappy\r\nrecord = new Record \"file://examples/test.smp\"\r\n\r\n```\r\n\r\nRecording\r\n\r\n``` coffeescript\r\n\r\n{Record, SimpleRecorder} = require 'sampler'\r\n\r\n# create a brand new record\r\n# if there is no argument, data is stored in memory\r\n#record = new Record()\r\n\r\n# file:// protocol need a path with a valid extension to guess the format (yaml,yml,json)\r\nrecord = new Record(\"file://examples/test.yaml\")\r\n\r\n# now, you can start playing with your record. \r\n# let's record things in the record! for this, you need a Recorder\r\nrecorder = new SimpleRecorder(record)\r\n\r\n# then just write things inside\r\nrecorder.write \"hello\"\r\nrecorder.write foo: \"hello\", bar: \"world\"\r\nrecorder.write new Buffer()\r\n\r\n# not yet implemented, but soon you will be able to add an event at a specific time\r\n# recorder.writeAt moment(1982,1,1), \"cold wave\"\r\n\r\n# also, don't forget to close the recorder when you don't use it anymore\r\n# the reason is that a recorder start some background processes\r\n# (eg. async synchronization of database) that need to be stopped manually\r\n# if there is not more data to record. \r\nrecorder.stop()\r\n\r\n\r\n```\r\n\r\nPlayback\r\n\r\n``` coffeescript\r\n\r\n{Record, SimplePlayer} = require 'sampler'\r\n\r\n# load an existing record - for the moment.. nothing is supported :) only in-memory\r\n# but in the future, you will be able to load MongoDB, SQL, Redis records etc..\r\nrecord = new Record(\"redis://foobar\")\r\n\r\n# create a basic player\r\nplayer = new SimplePlayer(record)\r\n\r\n```\r\n\r\n### Stream API\r\n\r\nRecording\r\n\r\n``` coffeescript\r\n\r\n{Record, StreamRecorder} = require 'sampler'\r\n\r\nrecord = new Record \"file://examples/twitter.json\"\r\n\r\nrecorder = new StreamRecorder record\r\n\r\nmyInputStream.pipe(recorder)\r\n\r\n# that's all folks!\r\n# you don't need to close explicitely the StreamRecorder (unlike SimpleRecorder)\r\n# since it can detect automatically 'close' events from input stream\r\n```\r\n\r\n\r\nPlaying\r\n\r\n``` coffeescript\r\n\r\n{Record, StreamPlayer} = require 'sampler'\r\n\r\nrecord = new Record \"file://examples/twitter.json\"\r\n\r\nplayer = new StreamPlayer record\r\n\r\n# by default there is no timestamps, however you can enable them using:\r\nplayer = new StreamPlayer record,\r\n  withTimestamp: yes\r\n# this will emit messages in the form {timestamp, data}\r\n\r\n\r\n# to listen to events, just do:\r\nplayer.on 'data', (data) ->\r\n  # do something with the data\r\n\r\nplayer.on 'end', ->\r\n  # finished!\r\n\r\n```\r\n\r\nPiping\r\n\r\n``` coffeescript\r\n\r\n# to be continued\r\n\r\n```\r\n\r\n## Examples\r\n\r\n### Playing with Twitter Stream\r\n\r\n  NOTE 1: you need to install ntwitter manually before running the example:\r\n\r\n   $ npm install -g ntwitter\r\n\r\n  I didn't include it as a dependency to keep dependencies light.\r\n\r\n  NOTE 2: you need to have some some environment variables containing your Twitter tokens\r\n\r\n``` coffeescript\r\n\r\n# standard node library\r\n{log,inspect} = require 'util'\r\n\r\n# third-parties libraries\r\nTwitter =       require 'ntwitter'\r\nmoment =        require 'moment'\r\n\r\n# sampler modules\r\nsampler =       require '../lib/sampler'\r\n\r\n# shortcuts\r\ndelay = (t, f) -> setTimeout f, t\r\n\r\n# PARAMETERS\r\nduration = 10\r\ntimeline = new sampler.Record \"file://twitter.json\"\r\ntwit = new Twitter\r\n  consumer_key: process.env.TWITTER_CONSUMER_KEY\r\n  consumer_secret: process.env.TWITTER_CONSUMER_SECRET\r\n  access_token_key: process.env.TWITTER_TOKEN_KEY\r\n  access_token_secret: process.env.TWITTER_TOKEN_SECRET\r\n\r\n# let's open a stream on random tweets\r\ntwit.stream 'statuses/sample', (stream) ->\r\n  recorder = new sampler.SimpleRecorder timeline\r\n  stream.on 'error', (err) ->\r\n    log \"twitter error: #{inspect err}\"\r\n    # there is a bug in ntwitter. sometimes tweets come from here!\r\n    if err.text?\r\n      recorder.writeAt moment(err.created_at), err.text\r\n\r\n  stream.on 'data', (data) -> \r\n    recorder.writeAt moment(data.created_at), data.text\r\n  delay duration*1000, ->\r\n    recorder.close()\r\n    log \"playing tweets back\"\r\n    new sampler.SimplePlayer timeline,\r\n      speed: 2.0\r\n      withTimestamp: yes\r\n      onData: (event) ->\r\n        log \"#{event.timestamp}: #{inspect event.data}\"\r\n      onEnd: ->\r\n        process.exit()\r\n  log \"listening for #{duration} seconds\"\r\n\r\n```\r\n\r\n\r\n## Changelog\r\n\r\n### 0.0.5\r\n\r\n * now we can load a json file! and it's tested!\r\n * more bugfixes\r\n * more tests\r\n * addd a recorder.close() function\r\n\r\n### 0.0.4\r\n\r\n * Fixed broken YAML dependency\r\n\r\n### 0.0.3\r\n \r\n * receiving timestamps during playback is now optional (disabled by default)\r\n * various bugfixes\r\n * tests are passing\r\n * basic support for file storage in YAML, JSON and JSON + Snappy\r\n * experimental support of Node's Stream API\r\n\r\n### 0.0.2\r\n\r\n * REFACTORED EVERYTHING WITH FIRE\r\n\r\n### 0.0.1\r\n\r\n I Added a callback when the playback reach the end:\r\n \r\n``` javascript\r\n\r\n  sampler.on(\"end\", function() {\r\n    console.log(\"playback terminated\")\r\n  })\r\n  \r\n```\r\n\r\n### 0.0.0\r\n\r\n  First version\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Record things, play them back","name":"Node-sampler"}